#!/bin/bash

# KyOS Installation Launcher - Dragon Arch
# This script provides a user-friendly entry point to the KyOS installer.
# It handles privilege escalation automatically and provides mode selection.

version="2.0.0"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_banner() {
    echo -e "${GREEN}"
    cat << "EOF"
╔══════════════════════════════════════════════════════════════════════════════╗
║                            Dragon Arch Installer                            ║
║                         KyOS Installation System                            ║
╚══════════════════════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# Function to check if running as root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

# Function to escalate privileges
escalate_privileges() {
    print_info "KyOS installer requires root privileges for system installation."
    
    # Try sudo first
    if command -v sudo >/dev/null 2>&1; then
        print_info "Attempting to escalate privileges using sudo..."
        exec sudo "$0" "$@"
    # Try doas as fallback
    elif command -v doas >/dev/null 2>&1; then
        print_info "Attempting to escalate privileges using doas..."
        exec doas "$0" "$@"
    else
        print_error "No privilege escalation method found (sudo/doas)."
        print_error "Please run this script as root or install sudo/doas."
        exit 1
    fi
}

# Function to show help
show_help() {
    print_banner
    echo -e "${CYAN}Usage:${NC}"
    echo "  kyosinstall [OPTIONS]"
    echo ""
    echo -e "${CYAN}Options:${NC}"
    echo "  --auto, -a        Run automated installation (uses sensible defaults)"
    echo "  --tui, -t         Run TUI (Text User Interface) installation"
    echo "  --help, -h        Show this help message"
    echo "  --version, -v     Show version information"
    echo ""
    echo -e "${CYAN}Description:${NC}"
    echo "  KyOS Installation System provides an easy way to install Dragon Arch"
    echo "  with full support for BlackArch tools, NVIDIA drivers, and more."
    echo ""
    echo "  If no mode is specified, you will be prompted to choose."
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo "  kyosinstall           # Interactive mode selection"
    echo "  kyosinstall --auto    # Automated installation"
    echo "  kyosinstall --tui     # TUI installation"
}

# Function to show version
show_version() {
    print_banner
    echo -e "${CYAN}KyOS Installation System${NC}"
    echo "Version: $version"
    echo "Part of Dragon Arch (KyOS)"
    echo ""
    echo "For more information, visit:"
    echo "https://github.com/rubberpirate/ky-suigetsu"
}

# Function to select installation mode
select_mode() {
    print_banner
    echo -e "${CYAN}Please select installation mode:${NC}"
    echo ""
    echo "1) Automated Installation (Recommended)"
    echo "   - Uses sensible defaults for quick setup"
    echo "   - Suitable for most users"
    echo "   - Can still review settings before installation"
    echo ""
    echo "2) TUI Installation (Advanced)"
    echo "   - Full Text User Interface with all options"
    echo "   - Configure every aspect manually"
    echo "   - Recommended for experienced users"
    echo ""
    echo "3) Show Help"
    echo "4) Exit"
    echo ""
    
    while true; do
        read -p "Enter your choice (1-4): " choice
        case $choice in
            1)
                return 1  # Auto mode
                ;;
            2)
                return 2  # TUI mode
                ;;
            3)
                show_help
                exit 0
                ;;
            4)
                print_info "Installation cancelled by user."
                exit 0
                ;;
            *)
                print_error "Invalid choice. Please enter 1, 2, 3, or 4."
                ;;
        esac
    done
}

# Function to run automated installation
run_auto_install() {
    print_info "Starting automated installation..."
    
    if [ ! -f "/usr/local/bin/kyosinstall-auto" ]; then
        print_error "Automated installer not found at /usr/local/bin/kyosinstall-auto"
        exit 1
    fi
    
    exec /usr/local/bin/kyosinstall-auto "$@"
}

# Function to run TUI installation
run_tui_install() {
    print_info "Starting TUI installation..."
    
    if [ ! -f "/usr/local/bin/kyos-install" ]; then
        print_error "TUI installer not found at /usr/local/bin/kyos-install"
        exit 1
    fi
    
    exec /usr/local/bin/kyos-install "$@"
}

# Main script logic
main() {
    local mode=""
    local auto_mode=false
    local tui_mode=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --auto|-a)
                auto_mode=true
                shift
                ;;
            --tui|-t)
                tui_mode=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                show_version
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                print_info "Use --help for usage information."
                exit 1
                ;;
        esac
    done
    
    # Check for conflicting modes
    if [ "$auto_mode" = true ] && [ "$tui_mode" = true ]; then
        print_error "Cannot specify both --auto and --tui modes."
        exit 1
    fi
    
    # Check if running as root, escalate if not
    if ! check_root; then
        escalate_privileges "$@"
        # If we reach here, escalation failed
        print_error "Failed to escalate privileges."
        exit 1
    fi
    
    print_success "Running with root privileges."
    
    # Determine mode
    if [ "$auto_mode" = true ]; then
        run_auto_install "$@"
    elif [ "$tui_mode" = true ]; then
        run_tui_install "$@"
    else
        # No mode specified, let user choose
        select_mode
        local mode_choice=$?
        
        if [ $mode_choice -eq 1 ]; then
            run_auto_install "$@"
        elif [ $mode_choice -eq 2 ]; then
            run_tui_install "$@"
        fi
    fi
}

# Check if script is being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
